
DOOR AND GARAGE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000078a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  0000078a  000007fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001268  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083c  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a2c  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001cc  00000000  00000000  00002e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000590  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a49  00000000  00000000  000035f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 91 01 	call	0x322	; 0x322 <main>
  7a:	0c 94 c3 03 	jmp	0x786	; 0x786 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_vsetPINDir>:
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
  82:	82 34       	cpi	r24, 0x42	; 66
  84:	19 f1       	breq	.+70     	; 0xcc <DIO_vsetPINDir+0x4a>
  86:	18 f4       	brcc	.+6      	; 0x8e <DIO_vsetPINDir+0xc>
  88:	81 34       	cpi	r24, 0x41	; 65
  8a:	39 f0       	breq	.+14     	; 0x9a <DIO_vsetPINDir+0x18>
  8c:	08 95       	ret
  8e:	83 34       	cpi	r24, 0x43	; 67
  90:	b1 f1       	breq	.+108    	; 0xfe <DIO_vsetPINDir+0x7c>
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vsetPINDir+0x16>
  96:	4c c0       	rjmp	.+152    	; 0x130 <DIO_vsetPINDir+0xae>
  98:	08 95       	ret
  9a:	41 30       	cpi	r20, 0x01	; 1
  9c:	59 f4       	brne	.+22     	; 0xb4 <DIO_vsetPINDir+0x32>
  9e:	2a b3       	in	r18, 0x1a	; 26
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_vsetPINDir+0x28>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_vsetPINDir+0x24>
  ae:	82 2b       	or	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_vsetPINDir+0x3e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_vsetPINDir+0x3a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	59 f4       	brne	.+22     	; 0xe6 <DIO_vsetPINDir+0x64>
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPINDir+0x5a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPINDir+0x56>
  e0:	82 2b       	or	r24, r18
  e2:	87 bb       	out	0x17, r24	; 23
  e4:	08 95       	ret
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_vsetPINDir+0x70>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_vsetPINDir+0x6c>
  f6:	80 95       	com	r24
  f8:	82 23       	and	r24, r18
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	59 f4       	brne	.+22     	; 0x118 <DIO_vsetPINDir+0x96>
 102:	24 b3       	in	r18, 0x14	; 20
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_vsetPINDir+0x8c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_vsetPINDir+0x88>
 112:	82 2b       	or	r24, r18
 114:	84 bb       	out	0x14, r24	; 20
 116:	08 95       	ret
 118:	24 b3       	in	r18, 0x14	; 20
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_vsetPINDir+0xa2>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_vsetPINDir+0x9e>
 128:	80 95       	com	r24
 12a:	82 23       	and	r24, r18
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	08 95       	ret
 130:	41 30       	cpi	r20, 0x01	; 1
 132:	59 f4       	brne	.+22     	; 0x14a <DIO_vsetPINDir+0xc8>
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_vsetPINDir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_vsetPINDir+0xba>
 144:	82 2b       	or	r24, r18
 146:	81 bb       	out	0x11, r24	; 17
 148:	08 95       	ret
 14a:	21 b3       	in	r18, 0x11	; 17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_vsetPINDir+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_vsetPINDir+0xd0>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <DIO_write>:
 162:	82 34       	cpi	r24, 0x42	; 66
 164:	19 f1       	breq	.+70     	; 0x1ac <DIO_write+0x4a>
 166:	18 f4       	brcc	.+6      	; 0x16e <DIO_write+0xc>
 168:	81 34       	cpi	r24, 0x41	; 65
 16a:	39 f0       	breq	.+14     	; 0x17a <DIO_write+0x18>
 16c:	08 95       	ret
 16e:	83 34       	cpi	r24, 0x43	; 67
 170:	b1 f1       	breq	.+108    	; 0x1de <DIO_write+0x7c>
 172:	84 34       	cpi	r24, 0x44	; 68
 174:	09 f4       	brne	.+2      	; 0x178 <DIO_write+0x16>
 176:	4c c0       	rjmp	.+152    	; 0x210 <DIO_write+0xae>
 178:	08 95       	ret
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	59 f4       	brne	.+22     	; 0x194 <DIO_write+0x32>
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_write+0x28>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_write+0x24>
 18e:	82 2b       	or	r24, r18
 190:	8b bb       	out	0x1b, r24	; 27
 192:	08 95       	ret
 194:	2b b3       	in	r18, 0x1b	; 27
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_write+0x3e>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_write+0x3a>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	59 f4       	brne	.+22     	; 0x1c6 <DIO_write+0x64>
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_write+0x5a>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_write+0x56>
 1c0:	82 2b       	or	r24, r18
 1c2:	88 bb       	out	0x18, r24	; 24
 1c4:	08 95       	ret
 1c6:	28 b3       	in	r18, 0x18	; 24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_write+0x70>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_write+0x6c>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
 1de:	41 30       	cpi	r20, 0x01	; 1
 1e0:	59 f4       	brne	.+22     	; 0x1f8 <DIO_write+0x96>
 1e2:	25 b3       	in	r18, 0x15	; 21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_write+0x8c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_write+0x88>
 1f2:	82 2b       	or	r24, r18
 1f4:	85 bb       	out	0x15, r24	; 21
 1f6:	08 95       	ret
 1f8:	25 b3       	in	r18, 0x15	; 21
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_write+0xa2>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_write+0x9e>
 208:	80 95       	com	r24
 20a:	82 23       	and	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
 210:	41 30       	cpi	r20, 0x01	; 1
 212:	59 f4       	brne	.+22     	; 0x22a <DIO_write+0xc8>
 214:	22 b3       	in	r18, 0x12	; 18
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_write+0xbe>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_write+0xba>
 224:	82 2b       	or	r24, r18
 226:	82 bb       	out	0x12, r24	; 18
 228:	08 95       	ret
 22a:	22 b3       	in	r18, 0x12	; 18
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_write+0xd4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_write+0xd0>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret

00000242 <DIO_u8read>:
 242:	82 34       	cpi	r24, 0x42	; 66
 244:	e9 f0       	breq	.+58     	; 0x280 <DIO_u8read+0x3e>
 246:	18 f4       	brcc	.+6      	; 0x24e <DIO_u8read+0xc>
 248:	81 34       	cpi	r24, 0x41	; 65
 24a:	31 f0       	breq	.+12     	; 0x258 <DIO_u8read+0x16>
 24c:	55 c0       	rjmp	.+170    	; 0x2f8 <DIO_u8read+0xb6>
 24e:	83 34       	cpi	r24, 0x43	; 67
 250:	59 f1       	breq	.+86     	; 0x2a8 <DIO_u8read+0x66>
 252:	84 34       	cpi	r24, 0x44	; 68
 254:	e9 f1       	breq	.+122    	; 0x2d0 <DIO_u8read+0x8e>
 256:	50 c0       	rjmp	.+160    	; 0x2f8 <DIO_u8read+0xb6>
 258:	49 b3       	in	r20, 0x19	; 25
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	9c 01       	movw	r18, r24
 260:	06 2e       	mov	r0, r22
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_u8read+0x26>
 264:	22 0f       	add	r18, r18
 266:	33 1f       	adc	r19, r19
 268:	0a 94       	dec	r0
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_u8read+0x22>
 26c:	84 2f       	mov	r24, r20
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	82 23       	and	r24, r18
 272:	93 23       	and	r25, r19
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_u8read+0x38>
 276:	95 95       	asr	r25
 278:	87 95       	ror	r24
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_u8read+0x34>
 27e:	08 95       	ret
 280:	46 b3       	in	r20, 0x16	; 22
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	9c 01       	movw	r18, r24
 288:	06 2e       	mov	r0, r22
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_u8read+0x4e>
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	0a 94       	dec	r0
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_u8read+0x4a>
 294:	84 2f       	mov	r24, r20
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	82 23       	and	r24, r18
 29a:	93 23       	and	r25, r19
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8read+0x60>
 29e:	95 95       	asr	r25
 2a0:	87 95       	ror	r24
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_u8read+0x5c>
 2a6:	08 95       	ret
 2a8:	43 b3       	in	r20, 0x13	; 19
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	9c 01       	movw	r18, r24
 2b0:	06 2e       	mov	r0, r22
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_u8read+0x76>
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_u8read+0x72>
 2bc:	84 2f       	mov	r24, r20
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	82 23       	and	r24, r18
 2c2:	93 23       	and	r25, r19
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_u8read+0x88>
 2c6:	95 95       	asr	r25
 2c8:	87 95       	ror	r24
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_u8read+0x84>
 2ce:	08 95       	ret
 2d0:	40 b3       	in	r20, 0x10	; 16
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	9c 01       	movw	r18, r24
 2d8:	06 2e       	mov	r0, r22
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_u8read+0x9e>
 2dc:	22 0f       	add	r18, r18
 2de:	33 1f       	adc	r19, r19
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_u8read+0x9a>
 2e4:	84 2f       	mov	r24, r20
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	82 23       	and	r24, r18
 2ea:	93 23       	and	r25, r19
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_u8read+0xb0>
 2ee:	95 95       	asr	r25
 2f0:	87 95       	ror	r24
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_u8read+0xac>
 2f6:	08 95       	ret
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	08 95       	ret

000002fc <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 2fc:	82 34       	cpi	r24, 0x42	; 66
 2fe:	59 f0       	breq	.+22     	; 0x316 <DIO_write_port+0x1a>
 300:	18 f4       	brcc	.+6      	; 0x308 <DIO_write_port+0xc>
 302:	81 34       	cpi	r24, 0x41	; 65
 304:	31 f0       	breq	.+12     	; 0x312 <DIO_write_port+0x16>
 306:	08 95       	ret
 308:	83 34       	cpi	r24, 0x43	; 67
 30a:	39 f0       	breq	.+14     	; 0x31a <DIO_write_port+0x1e>
 30c:	84 34       	cpi	r24, 0x44	; 68
 30e:	39 f0       	breq	.+14     	; 0x31e <DIO_write_port+0x22>
 310:	08 95       	ret
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 312:	6b bb       	out	0x1b, r22	; 27
		break ;
 314:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 316:	68 bb       	out	0x18, r22	; 24
		break ;
 318:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 31a:	65 bb       	out	0x15, r22	; 21
		break ;
 31c:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 31e:	62 bb       	out	0x12, r22	; 18
 320:	08 95       	ret

00000322 <main>:
#include "STMR.h"
#define F_CPU 1000000UL
#include <util/delay.h>
int main(void)
{
	LCD_vInit();
 322:	0e 94 04 02 	call	0x408	; 0x408 <LCD_vInit>
	LCD_vSend_string("  welcome home  ");
 326:	80 e6       	ldi	r24, 0x60	; 96
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_vSend_string>
	LCD_movecursor(2,1);
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	82 e0       	ldi	r24, 0x02	; 2
 332:	0e 94 94 02 	call	0x528	; 0x528 <LCD_movecursor>
	LCD_vSend_string("  ****sir****  ");
 336:	81 e7       	ldi	r24, 0x71	; 113
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_vSend_string>
	signed char flag1=0,flag2=0,IR1,IR2,counter=0;
 33e:	c0 e0       	ldi	r28, 0x00	; 0
    while(1)
    {
         IR1=DIO_u8read('D',0);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	84 e4       	ldi	r24, 0x44	; 68
 344:	0e 94 21 01 	call	0x242	; 0x242 <DIO_u8read>
		 if(IR1==1 && flag1==0)
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	d9 f4       	brne	.+54     	; 0x382 <main+0x60>
 34c:	c1 11       	cpse	r28, r1
 34e:	19 c0       	rjmp	.+50     	; 0x382 <main+0x60>
		 {
			 LCD_movecursor(1,11);
 350:	6b e0       	ldi	r22, 0x0B	; 11
 352:	0e 94 94 02 	call	0x528	; 0x528 <LCD_movecursor>
			 flag1=1;
			  {
				 LCD_clearscreen();
 356:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_clearscreen>
				 LCD_vSend_string("the door is");
 35a:	81 e8       	ldi	r24, 0x81	; 129
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_vSend_string>
				 LCD_movecursor(2,1);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	0e 94 94 02 	call	0x528	; 0x528 <LCD_movecursor>
				 LCD_vSend_string("open sir");
 36a:	8d e8       	ldi	r24, 0x8D	; 141
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_vSend_string>
			  }
			  timer1_wave_fastPWM_B(0.999999);
 372:	6f ee       	ldi	r22, 0xEF	; 239
 374:	7f ef       	ldi	r23, 0xFF	; 255
 376:	8f e7       	ldi	r24, 0x7F	; 127
 378:	9f e3       	ldi	r25, 0x3F	; 63
 37a:	0e 94 b5 02 	call	0x56a	; 0x56a <timer1_wave_fastPWM_B>
    {
         IR1=DIO_u8read('D',0);
		 if(IR1==1 && flag1==0)
		 {
			 LCD_movecursor(1,11);
			 flag1=1;
 37e:	c1 e0       	ldi	r28, 0x01	; 1
				 LCD_clearscreen();
				 LCD_vSend_string("the door is");
				 LCD_movecursor(2,1);
				 LCD_vSend_string("open sir");
			  }
			  timer1_wave_fastPWM_B(0.999999);
 380:	df cf       	rjmp	.-66     	; 0x340 <main+0x1e>
			  
			  
		 }
		 else if(IR1==0 && flag1==1)
 382:	81 11       	cpse	r24, r1
 384:	dd cf       	rjmp	.-70     	; 0x340 <main+0x1e>
 386:	c1 30       	cpi	r28, 0x01	; 1
 388:	d9 f6       	brne	.-74     	; 0x340 <main+0x1e>
		 {
			 flag1=0;
			 LCD_clearscreen();
 38a:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_clearscreen>
			 LCD_vSend_string("the door is");
 38e:	81 e8       	ldi	r24, 0x81	; 129
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_vSend_string>
			 LCD_movecursor(2,1);
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 94 02 	call	0x528	; 0x528 <LCD_movecursor>
			 LCD_vSend_string("closed sir");
 39e:	86 e9       	ldi	r24, 0x96	; 150
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_vSend_string>
			 timer1_wave_fastPWM_B(1.499999);
 3a6:	68 ef       	ldi	r22, 0xF8	; 248
 3a8:	7f ef       	ldi	r23, 0xFF	; 255
 3aa:	8f eb       	ldi	r24, 0xBF	; 191
 3ac:	9f e3       	ldi	r25, 0x3F	; 63
 3ae:	0e 94 b5 02 	call	0x56a	; 0x56a <timer1_wave_fastPWM_B>
			  
			  
		 }
		 else if(IR1==0 && flag1==1)
		 {
			 flag1=0;
 3b2:	c0 e0       	ldi	r28, 0x00	; 0
 3b4:	c5 cf       	rjmp	.-118    	; 0x340 <main+0x1e>

000003b6 <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	82 e4       	ldi	r24, 0x42	; 66
 3bc:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c0:	83 ef       	ldi	r24, 0xF3	; 243
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <send_falling_edge+0xe>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <send_falling_edge+0x14>
 3ca:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	82 e4       	ldi	r24, 0x42	; 66
 3d2:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
 3d6:	83 ef       	ldi	r24, 0xF3	; 243
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <send_falling_edge+0x24>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <send_falling_edge+0x2a>
 3e0:	00 00       	nop
 3e2:	08 95       	ret

000003e4 <LCD_vSend_cmd>:
	_delay_ms(2);
}
void LCD_vSend_cmd(char cmd)
{
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
 3e4:	68 2f       	mov	r22, r24
 3e6:	81 e4       	ldi	r24, 0x41	; 65
 3e8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_write_port>
	DIO_write('B',RS,0);
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	82 e4       	ldi	r24, 0x42	; 66
 3f2:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
	send_falling_edge();
 3f6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <send_falling_edge>
 3fa:	89 ef       	ldi	r24, 0xF9	; 249
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <LCD_vSend_cmd+0x1a>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
 406:	08 95       	ret

00000408 <LCD_vInit>:
 408:	8f e4       	ldi	r24, 0x4F	; 79
 40a:	93 ec       	ldi	r25, 0xC3	; 195
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <LCD_vInit+0x4>
 410:	00 c0       	rjmp	.+0      	; 0x412 <LCD_vInit+0xa>
 412:	00 00       	nop

void LCD_vInit(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
 414:	41 e0       	ldi	r20, 0x01	; 1
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	81 e4       	ldi	r24, 0x41	; 65
 41a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
 41e:	41 e0       	ldi	r20, 0x01	; 1
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	81 e4       	ldi	r24, 0x41	; 65
 424:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	62 e0       	ldi	r22, 0x02	; 2
 42c:	81 e4       	ldi	r24, 0x41	; 65
 42e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	63 e0       	ldi	r22, 0x03	; 3
 436:	81 e4       	ldi	r24, 0x41	; 65
 438:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	64 e0       	ldi	r22, 0x04	; 4
 440:	81 e4       	ldi	r24, 0x41	; 65
 442:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	65 e0       	ldi	r22, 0x05	; 5
 44a:	81 e4       	ldi	r24, 0x41	; 65
 44c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	66 e0       	ldi	r22, 0x06	; 6
 454:	81 e4       	ldi	r24, 0x41	; 65
 456:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	67 e0       	ldi	r22, 0x07	; 7
 45e:	81 e4       	ldi	r24, 0x41	; 65
 460:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	82 e4       	ldi	r24, 0x42	; 66
 46a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	62 e0       	ldi	r22, 0x02	; 2
 472:	82 e4       	ldi	r24, 0x42	; 66
 474:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	82 e4       	ldi	r24, 0x42	; 66
 47e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vsetPINDir>
	DIO_write('B',RW,0);
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	82 e4       	ldi	r24, 0x42	; 66
 488:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
 48c:	88 e3       	ldi	r24, 0x38	; 56
 48e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_vSend_cmd>
 492:	89 ef       	ldi	r24, 0xF9	; 249
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <LCD_vInit+0x8e>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <LCD_vInit+0x94>
 49c:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 49e:	8e e0       	ldi	r24, 0x0E	; 14
 4a0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_vSend_cmd>
 4a4:	89 ef       	ldi	r24, 0xF9	; 249
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCD_vInit+0xa0>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <LCD_vInit+0xa6>
 4ae:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_vSend_cmd>
 4b6:	83 ec       	ldi	r24, 0xC3	; 195
 4b8:	99 e0       	ldi	r25, 0x09	; 9
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCD_vInit+0xb2>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCD_vInit+0xb8>
 4c0:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 4c2:	86 e0       	ldi	r24, 0x06	; 6
 4c4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_vSend_cmd>
 4c8:	89 ef       	ldi	r24, 0xF9	; 249
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <LCD_vInit+0xc4>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <LCD_vInit+0xca>
 4d2:	00 00       	nop
 4d4:	08 95       	ret

000004d6 <LCD_vSend_char>:
}

void LCD_vSend_char(char data)
{
	#if defined eight_bits_mode
	DIO_write_port('A',data);
 4d6:	68 2f       	mov	r22, r24
 4d8:	81 e4       	ldi	r24, 0x41	; 65
 4da:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_write_port>
	DIO_write('B',RS,1);
 4de:	41 e0       	ldi	r20, 0x01	; 1
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	82 e4       	ldi	r24, 0x42	; 66
 4e4:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_write>
	send_falling_edge();
 4e8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <send_falling_edge>
 4ec:	89 ef       	ldi	r24, 0xF9	; 249
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <LCD_vSend_char+0x1a>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <LCD_vSend_char+0x20>
 4f6:	00 00       	nop
 4f8:	08 95       	ret

000004fa <LCD_vSend_string>:
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
{
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 500:	03 c0       	rjmp	.+6      	; 0x508 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
 502:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_vSend_char>
		data++;
 506:	21 96       	adiw	r28, 0x01	; 1
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 508:	88 81       	ld	r24, Y
 50a:	81 11       	cpse	r24, r1
 50c:	fa cf       	rjmp	.-12     	; 0x502 <LCD_vSend_string+0x8>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	08 95       	ret

00000514 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_vSend_cmd>
 51a:	83 ec       	ldi	r24, 0xC3	; 195
 51c:	99 e0       	ldi	r25, 0x09	; 9
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <LCD_clearscreen+0xa>
 522:	00 c0       	rjmp	.+0      	; 0x524 <LCD_clearscreen+0x10>
 524:	00 00       	nop
 526:	08 95       	ret

00000528 <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 528:	9f ef       	ldi	r25, 0xFF	; 255
 52a:	98 0f       	add	r25, r24
 52c:	92 30       	cpi	r25, 0x02	; 2
 52e:	70 f4       	brcc	.+28     	; 0x54c <LCD_movecursor+0x24>
 530:	61 31       	cpi	r22, 0x11	; 17
 532:	70 f4       	brcc	.+28     	; 0x550 <LCD_movecursor+0x28>
 534:	66 23       	and	r22, r22
 536:	71 f0       	breq	.+28     	; 0x554 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	19 f4       	brne	.+6      	; 0x542 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 53c:	2f e7       	ldi	r18, 0x7F	; 127
 53e:	26 0f       	add	r18, r22
 540:	0a c0       	rjmp	.+20     	; 0x556 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 542:	82 30       	cpi	r24, 0x02	; 2
 544:	41 f4       	brne	.+16     	; 0x556 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
 546:	2f eb       	ldi	r18, 0xBF	; 191
 548:	26 0f       	add	r18, r22
 54a:	05 c0       	rjmp	.+10     	; 0x556 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 54c:	20 e8       	ldi	r18, 0x80	; 128
 54e:	03 c0       	rjmp	.+6      	; 0x556 <LCD_movecursor+0x2e>
 550:	20 e8       	ldi	r18, 0x80	; 128
 552:	01 c0       	rjmp	.+2      	; 0x556 <LCD_movecursor+0x2e>
 554:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 556:	82 2f       	mov	r24, r18
 558:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_vSend_cmd>
 55c:	89 ef       	ldi	r24, 0xF9	; 249
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <LCD_movecursor+0x38>
 564:	00 c0       	rjmp	.+0      	; 0x566 <LCD_movecursor+0x3e>
 566:	00 00       	nop
 568:	08 95       	ret

0000056a <timer1_wave_fastPWM_B>:
	SET_BIT(TCCR1A,COM1A1);
}
void timer1_wave_fastPWM_B(double value)
{
	/* set OC1B as output pin */
	SET_BIT(DDRD,4);
 56a:	21 b3       	in	r18, 0x11	; 17
 56c:	20 61       	ori	r18, 0x10	; 16
 56e:	21 bb       	out	0x11, r18	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
 570:	2f b5       	in	r18, 0x2f	; 47
 572:	22 60       	ori	r18, 0x02	; 2
 574:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 576:	2e b5       	in	r18, 0x2e	; 46
 578:	28 60       	ori	r18, 0x08	; 8
 57a:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 57c:	2e b5       	in	r18, 0x2e	; 46
 57e:	20 61       	ori	r18, 0x10	; 16
 580:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1B,ICR1 */
	OCR1B=value*1000;
 582:	20 e0       	ldi	r18, 0x00	; 0
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	4a e7       	ldi	r20, 0x7A	; 122
 588:	54 e4       	ldi	r21, 0x44	; 68
 58a:	0e 94 2e 03 	call	0x65c	; 0x65c <__mulsf3>
 58e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__fixunssfsi>
 592:	79 bd       	out	0x29, r23	; 41
 594:	68 bd       	out	0x28, r22	; 40
	ICR1=19999;
 596:	8f e1       	ldi	r24, 0x1F	; 31
 598:	9e e4       	ldi	r25, 0x4E	; 78
 59a:	97 bd       	out	0x27, r25	; 39
 59c:	86 bd       	out	0x26, r24	; 38
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS10);
 59e:	8e b5       	in	r24, 0x2e	; 46
 5a0:	81 60       	ori	r24, 0x01	; 1
 5a2:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1B on compare match, set OC1B at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1B1);
 5a4:	8f b5       	in	r24, 0x2f	; 47
 5a6:	80 62       	ori	r24, 0x20	; 32
 5a8:	8f bd       	out	0x2f, r24	; 47
 5aa:	08 95       	ret

000005ac <__fixunssfsi>:
 5ac:	0e 94 0d 03 	call	0x61a	; 0x61a <__fp_splitA>
 5b0:	88 f0       	brcs	.+34     	; 0x5d4 <__fixunssfsi+0x28>
 5b2:	9f 57       	subi	r25, 0x7F	; 127
 5b4:	98 f0       	brcs	.+38     	; 0x5dc <__fixunssfsi+0x30>
 5b6:	b9 2f       	mov	r27, r25
 5b8:	99 27       	eor	r25, r25
 5ba:	b7 51       	subi	r27, 0x17	; 23
 5bc:	b0 f0       	brcs	.+44     	; 0x5ea <__fixunssfsi+0x3e>
 5be:	e1 f0       	breq	.+56     	; 0x5f8 <__fixunssfsi+0x4c>
 5c0:	66 0f       	add	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	88 1f       	adc	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	1a f0       	brmi	.+6      	; 0x5d0 <__fixunssfsi+0x24>
 5ca:	ba 95       	dec	r27
 5cc:	c9 f7       	brne	.-14     	; 0x5c0 <__fixunssfsi+0x14>
 5ce:	14 c0       	rjmp	.+40     	; 0x5f8 <__fixunssfsi+0x4c>
 5d0:	b1 30       	cpi	r27, 0x01	; 1
 5d2:	91 f0       	breq	.+36     	; 0x5f8 <__fixunssfsi+0x4c>
 5d4:	0e 94 27 03 	call	0x64e	; 0x64e <__fp_zero>
 5d8:	b1 e0       	ldi	r27, 0x01	; 1
 5da:	08 95       	ret
 5dc:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_zero>
 5e0:	67 2f       	mov	r22, r23
 5e2:	78 2f       	mov	r23, r24
 5e4:	88 27       	eor	r24, r24
 5e6:	b8 5f       	subi	r27, 0xF8	; 248
 5e8:	39 f0       	breq	.+14     	; 0x5f8 <__fixunssfsi+0x4c>
 5ea:	b9 3f       	cpi	r27, 0xF9	; 249
 5ec:	cc f3       	brlt	.-14     	; 0x5e0 <__fixunssfsi+0x34>
 5ee:	86 95       	lsr	r24
 5f0:	77 95       	ror	r23
 5f2:	67 95       	ror	r22
 5f4:	b3 95       	inc	r27
 5f6:	d9 f7       	brne	.-10     	; 0x5ee <__fixunssfsi+0x42>
 5f8:	3e f4       	brtc	.+14     	; 0x608 <__fixunssfsi+0x5c>
 5fa:	90 95       	com	r25
 5fc:	80 95       	com	r24
 5fe:	70 95       	com	r23
 600:	61 95       	neg	r22
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	8f 4f       	sbci	r24, 0xFF	; 255
 606:	9f 4f       	sbci	r25, 0xFF	; 255
 608:	08 95       	ret

0000060a <__fp_split3>:
 60a:	57 fd       	sbrc	r21, 7
 60c:	90 58       	subi	r25, 0x80	; 128
 60e:	44 0f       	add	r20, r20
 610:	55 1f       	adc	r21, r21
 612:	59 f0       	breq	.+22     	; 0x62a <__fp_splitA+0x10>
 614:	5f 3f       	cpi	r21, 0xFF	; 255
 616:	71 f0       	breq	.+28     	; 0x634 <__fp_splitA+0x1a>
 618:	47 95       	ror	r20

0000061a <__fp_splitA>:
 61a:	88 0f       	add	r24, r24
 61c:	97 fb       	bst	r25, 7
 61e:	99 1f       	adc	r25, r25
 620:	61 f0       	breq	.+24     	; 0x63a <__fp_splitA+0x20>
 622:	9f 3f       	cpi	r25, 0xFF	; 255
 624:	79 f0       	breq	.+30     	; 0x644 <__fp_splitA+0x2a>
 626:	87 95       	ror	r24
 628:	08 95       	ret
 62a:	12 16       	cp	r1, r18
 62c:	13 06       	cpc	r1, r19
 62e:	14 06       	cpc	r1, r20
 630:	55 1f       	adc	r21, r21
 632:	f2 cf       	rjmp	.-28     	; 0x618 <__fp_split3+0xe>
 634:	46 95       	lsr	r20
 636:	f1 df       	rcall	.-30     	; 0x61a <__fp_splitA>
 638:	08 c0       	rjmp	.+16     	; 0x64a <__fp_splitA+0x30>
 63a:	16 16       	cp	r1, r22
 63c:	17 06       	cpc	r1, r23
 63e:	18 06       	cpc	r1, r24
 640:	99 1f       	adc	r25, r25
 642:	f1 cf       	rjmp	.-30     	; 0x626 <__fp_splitA+0xc>
 644:	86 95       	lsr	r24
 646:	71 05       	cpc	r23, r1
 648:	61 05       	cpc	r22, r1
 64a:	08 94       	sec
 64c:	08 95       	ret

0000064e <__fp_zero>:
 64e:	e8 94       	clt

00000650 <__fp_szero>:
 650:	bb 27       	eor	r27, r27
 652:	66 27       	eor	r22, r22
 654:	77 27       	eor	r23, r23
 656:	cb 01       	movw	r24, r22
 658:	97 f9       	bld	r25, 7
 65a:	08 95       	ret

0000065c <__mulsf3>:
 65c:	0e 94 41 03 	call	0x682	; 0x682 <__mulsf3x>
 660:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_round>
 664:	0e 94 a4 03 	call	0x748	; 0x748 <__fp_pscA>
 668:	38 f0       	brcs	.+14     	; 0x678 <__mulsf3+0x1c>
 66a:	0e 94 ab 03 	call	0x756	; 0x756 <__fp_pscB>
 66e:	20 f0       	brcs	.+8      	; 0x678 <__mulsf3+0x1c>
 670:	95 23       	and	r25, r21
 672:	11 f0       	breq	.+4      	; 0x678 <__mulsf3+0x1c>
 674:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_inf>
 678:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_nan>
 67c:	11 24       	eor	r1, r1
 67e:	0c 94 28 03 	jmp	0x650	; 0x650 <__fp_szero>

00000682 <__mulsf3x>:
 682:	0e 94 05 03 	call	0x60a	; 0x60a <__fp_split3>
 686:	70 f3       	brcs	.-36     	; 0x664 <__mulsf3+0x8>

00000688 <__mulsf3_pse>:
 688:	95 9f       	mul	r25, r21
 68a:	c1 f3       	breq	.-16     	; 0x67c <__mulsf3+0x20>
 68c:	95 0f       	add	r25, r21
 68e:	50 e0       	ldi	r21, 0x00	; 0
 690:	55 1f       	adc	r21, r21
 692:	62 9f       	mul	r22, r18
 694:	f0 01       	movw	r30, r0
 696:	72 9f       	mul	r23, r18
 698:	bb 27       	eor	r27, r27
 69a:	f0 0d       	add	r31, r0
 69c:	b1 1d       	adc	r27, r1
 69e:	63 9f       	mul	r22, r19
 6a0:	aa 27       	eor	r26, r26
 6a2:	f0 0d       	add	r31, r0
 6a4:	b1 1d       	adc	r27, r1
 6a6:	aa 1f       	adc	r26, r26
 6a8:	64 9f       	mul	r22, r20
 6aa:	66 27       	eor	r22, r22
 6ac:	b0 0d       	add	r27, r0
 6ae:	a1 1d       	adc	r26, r1
 6b0:	66 1f       	adc	r22, r22
 6b2:	82 9f       	mul	r24, r18
 6b4:	22 27       	eor	r18, r18
 6b6:	b0 0d       	add	r27, r0
 6b8:	a1 1d       	adc	r26, r1
 6ba:	62 1f       	adc	r22, r18
 6bc:	73 9f       	mul	r23, r19
 6be:	b0 0d       	add	r27, r0
 6c0:	a1 1d       	adc	r26, r1
 6c2:	62 1f       	adc	r22, r18
 6c4:	83 9f       	mul	r24, r19
 6c6:	a0 0d       	add	r26, r0
 6c8:	61 1d       	adc	r22, r1
 6ca:	22 1f       	adc	r18, r18
 6cc:	74 9f       	mul	r23, r20
 6ce:	33 27       	eor	r19, r19
 6d0:	a0 0d       	add	r26, r0
 6d2:	61 1d       	adc	r22, r1
 6d4:	23 1f       	adc	r18, r19
 6d6:	84 9f       	mul	r24, r20
 6d8:	60 0d       	add	r22, r0
 6da:	21 1d       	adc	r18, r1
 6dc:	82 2f       	mov	r24, r18
 6de:	76 2f       	mov	r23, r22
 6e0:	6a 2f       	mov	r22, r26
 6e2:	11 24       	eor	r1, r1
 6e4:	9f 57       	subi	r25, 0x7F	; 127
 6e6:	50 40       	sbci	r21, 0x00	; 0
 6e8:	9a f0       	brmi	.+38     	; 0x710 <__mulsf3_pse+0x88>
 6ea:	f1 f0       	breq	.+60     	; 0x728 <__mulsf3_pse+0xa0>
 6ec:	88 23       	and	r24, r24
 6ee:	4a f0       	brmi	.+18     	; 0x702 <__mulsf3_pse+0x7a>
 6f0:	ee 0f       	add	r30, r30
 6f2:	ff 1f       	adc	r31, r31
 6f4:	bb 1f       	adc	r27, r27
 6f6:	66 1f       	adc	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	88 1f       	adc	r24, r24
 6fc:	91 50       	subi	r25, 0x01	; 1
 6fe:	50 40       	sbci	r21, 0x00	; 0
 700:	a9 f7       	brne	.-22     	; 0x6ec <__mulsf3_pse+0x64>
 702:	9e 3f       	cpi	r25, 0xFE	; 254
 704:	51 05       	cpc	r21, r1
 706:	80 f0       	brcs	.+32     	; 0x728 <__mulsf3_pse+0xa0>
 708:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_inf>
 70c:	0c 94 28 03 	jmp	0x650	; 0x650 <__fp_szero>
 710:	5f 3f       	cpi	r21, 0xFF	; 255
 712:	e4 f3       	brlt	.-8      	; 0x70c <__mulsf3_pse+0x84>
 714:	98 3e       	cpi	r25, 0xE8	; 232
 716:	d4 f3       	brlt	.-12     	; 0x70c <__mulsf3_pse+0x84>
 718:	86 95       	lsr	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b7 95       	ror	r27
 720:	f7 95       	ror	r31
 722:	e7 95       	ror	r30
 724:	9f 5f       	subi	r25, 0xFF	; 255
 726:	c1 f7       	brne	.-16     	; 0x718 <__mulsf3_pse+0x90>
 728:	fe 2b       	or	r31, r30
 72a:	88 0f       	add	r24, r24
 72c:	91 1d       	adc	r25, r1
 72e:	96 95       	lsr	r25
 730:	87 95       	ror	r24
 732:	97 f9       	bld	r25, 7
 734:	08 95       	ret

00000736 <__fp_inf>:
 736:	97 f9       	bld	r25, 7
 738:	9f 67       	ori	r25, 0x7F	; 127
 73a:	80 e8       	ldi	r24, 0x80	; 128
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	08 95       	ret

00000742 <__fp_nan>:
 742:	9f ef       	ldi	r25, 0xFF	; 255
 744:	80 ec       	ldi	r24, 0xC0	; 192
 746:	08 95       	ret

00000748 <__fp_pscA>:
 748:	00 24       	eor	r0, r0
 74a:	0a 94       	dec	r0
 74c:	16 16       	cp	r1, r22
 74e:	17 06       	cpc	r1, r23
 750:	18 06       	cpc	r1, r24
 752:	09 06       	cpc	r0, r25
 754:	08 95       	ret

00000756 <__fp_pscB>:
 756:	00 24       	eor	r0, r0
 758:	0a 94       	dec	r0
 75a:	12 16       	cp	r1, r18
 75c:	13 06       	cpc	r1, r19
 75e:	14 06       	cpc	r1, r20
 760:	05 06       	cpc	r0, r21
 762:	08 95       	ret

00000764 <__fp_round>:
 764:	09 2e       	mov	r0, r25
 766:	03 94       	inc	r0
 768:	00 0c       	add	r0, r0
 76a:	11 f4       	brne	.+4      	; 0x770 <__fp_round+0xc>
 76c:	88 23       	and	r24, r24
 76e:	52 f0       	brmi	.+20     	; 0x784 <__fp_round+0x20>
 770:	bb 0f       	add	r27, r27
 772:	40 f4       	brcc	.+16     	; 0x784 <__fp_round+0x20>
 774:	bf 2b       	or	r27, r31
 776:	11 f4       	brne	.+4      	; 0x77c <__fp_round+0x18>
 778:	60 ff       	sbrs	r22, 0
 77a:	04 c0       	rjmp	.+8      	; 0x784 <__fp_round+0x20>
 77c:	6f 5f       	subi	r22, 0xFF	; 255
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	8f 4f       	sbci	r24, 0xFF	; 255
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	08 95       	ret

00000786 <_exit>:
 786:	f8 94       	cli

00000788 <__stop_program>:
 788:	ff cf       	rjmp	.-2      	; 0x788 <__stop_program>
